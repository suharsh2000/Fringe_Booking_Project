trigger:
  branches:
    include:
      - main

pool:
  name: 'Default'
  demands:
    - Agent.Name -equals LAPTOP-DROUUN5U

stages:
  - stage: Build
    displayName: 'Build Backend'
    jobs:
      - job: BuildJob
        displayName: 'Build Spring Boot App'
        steps:
          - checkout: self

          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'Backend/pom.xml'
              mavenOptions: '-Xmx1024m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
              goals: 'clean package'

  - stage: Deploy
    dependsOn: Build
    displayName: 'Deploy Backend to Azure'
    jobs:
      - job: DeployJob
        displayName: 'Deploy Spring Boot JAR'
        steps:
          - checkout: self

          - task: DownloadSecureFile@1
            name: downloadProfile
            inputs:
              secureFile: 'fringebooking-profile'  # Replace with your publish profile filename

          - task: PowerShell@2
            displayName: 'Deploy JAR to Azure App Service'
            timeoutInMinutes: 10
            inputs:
              targetType: 'inline'
              script: |
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                $folder = "$(System.DefaultWorkingDirectory)\Backend\target"
                $filePath = Get-ChildItem $folder -Filter '*-SNAPSHOT.jar' | Select-Object -ExpandProperty FullName

                if (-not $filePath) {
                  Write-Error "❌ JAR file not found in $folder"
                  exit 1
                }

                Write-Host "✅ Found JAR: $filePath"

                $publishProfileXml = [xml](Get-Content "$(downloadProfile.secureFilePath)")
                $profile = $publishProfileXml.publishData.publishProfile | Where-Object { $_.publishMethod -eq 'ZipDeploy' }

                $userName = $profile.userName
                $password = $profile.userPWD
                $rawUrl = $profile.publishUrl

                if ($rawUrl -notlike 'https://*') {
                  $deployUrl = "https://$rawUrl"
                } else {
                  $deployUrl = $rawUrl
                }

                $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
                $credential = New-Object System.Management.Automation.PSCredential($userName, $securePassword)

                try {
                  Invoke-RestMethod -Uri "$deployUrl/api/zipdeploy" `
                                    -Method POST `
                                    -InFile $filePath `
                                    -Headers @{"Content-Type" = "application/octet-stream"} `
                                    -Credential $credential `
                                    -TimeoutSec 300
                  Write-Host "✅ Deployment to Azure App Service completed successfully."
                }
                catch {
                  Write-Error "❌ Deployment failed: $($_.Exception.Message)"
                  exit 1
                }
